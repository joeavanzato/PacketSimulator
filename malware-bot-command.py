#Simulating Malware Callback Backdoor.Win.GHOST bot-command

import socket, ipaddress, random, struct

random_ip_bits = random.getrandbits(32)
random_ip_fq = ipaddress.IPv4Address(random_ip_bits)
string_random_ip = str(random_ip_fq)


#IP = "24.97.90.60"
#IP = "141.123.91.18"
IP = "104.17.170.11"
PORT = 443
#BUFFER_SIZE = 512
MESSAGE_HEX = '000054514c424d12000000e0020000789c4b0010e3e82e671805a36098020022990171'
MESSAGE = 'TQLBM....à...x.Kãè.g..£`..."..q'
MESSAGE = MESSAGE.encode()
#print("IP Used : "+string_random_ip)
#socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) #UDP
#socket.sendto((MESSAGE), (IP, PORT)) #UDP

s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP) #TCP
s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)

def checksum(msg):
   s = 0
   for i in range(0, len(msg), 2):
      w = (ord(msg[i]) << 8) + (ord(msg[i + 1]))
   s = s + w
   s = (s >> 16) + (s & 0xffff);
   s = ~s & 0xffff
   return s

packet = ''

source_ip = "55.55.55.55"
dest_ip = '24.97.90.60'
ihl = 5
version = 4
tos = 0
tot_len = 20
id = 54321  #Id of this packet
frag_off = 0
ttl = 255
protocol = socket.IPPROTO_TCP
check = 10
saddr = socket.inet_aton (source_ip)
daddr = socket.inet_aton (dest_ip)
ihl_version = (version << 4) + ihl
ip_header = struct.pack('!BBHHHBBH4s4s' , ihl_version, tos, tot_len, id, frag_off, ttl, protocol, check, saddr, daddr)
source = 12345  # source port
dest = 80  # destination port
seq = 1
ack_seq = 1
doff = 5    #4 bit field, size of tcp header, 5 * 4 = 20 bytes
fin = 0
syn = 0
rst = 0
psh = 1
ack = 1
urg = 0
window = socket.htons (5840)
check = 0
urg_ptr = 0
offset_res = (doff << 4) + 0
tcp_flags = fin + (syn << 1) + (rst << 2) + (psh <<3) + (ack << 4) + (urg << 5)
tcp_header = struct.pack('!HHLLBBHHH' , source, dest, seq, ack_seq, offset_res, tcp_flags,  window, check, urg_ptr)
source_address = socket.inet_aton( source_ip )
dest_address = socket.inet_aton(dest_ip)
placeholder = 0
protocol = socket.IPPROTO_TCP
tcp_length = len(tcp_header)
psh = struct.pack('!4s4sBBH' , source_address , dest_address , placeholder , protocol , tcp_length);
psh = "psh + tcp_header"
tcp_checksum = checksum(psh)
tcp_header = struct.pack('!HHLLBBHHH' , source, dest, seq, ack_seq, offset_res, tcp_flags,  window, tcp_checksum , urg_ptr)
packet = ip_header + tcp_header + MESSAGE
s.bind((source_ip, source))
s.sendto((packet),(dest_ip,0))


#socket.sendto(tcp_raw.raw, (IP, 0))
#socket.connect((IP, PORT)) #TCP
#socket.send(MESSAGE) #TCP
#socket.close() #TCP



print("Done Testing FireEye")